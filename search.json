[
  {
    "objectID": "index.html#packages",
    "href": "index.html#packages",
    "title": "Emacs Configuration",
    "section": "Packages",
    "text": "Packages\nConfigure and use various (M)ELPA repositories…\n(package-initialize)\n(require 'package)\n\n;; Adding repositories along with priority https://emacs.stackexchange.com/a/2989/10100\n(setq package-archives\n      '((\"GNU ELPA\" . \"https://elpa.gnu.org/packages/\")\n        (\"NonGNU ELPA\"  . \"https://elpa.nongnu.org/nongnu/\")\n        (\"MELPA Stable\" . \"https://stable.melpa.org/packages/\")\n        (\"MELPA\"    . \"https://melpa.org/packages/\"))\n      package-archive-priorities\n      '((\"MELPA\" . 10)\n        (\"GNU ELPA\" . 5)\n        (\"NonGNU ELPA\"  . 5)\n        (\"MELPA Stable\" . 0)))\n;; On some systems we have problems communicating with ELPA (https://emacs.stackexchange.com/a/62210)\n(setq gnutls-algorithm-priority \"NORMAL:-VERS-TLS1.3\")\n\n(when (not package-archive-contents)\n  (package-refresh-contents))"
  },
  {
    "objectID": "index.html#packages-1",
    "href": "index.html#packages-1",
    "title": "Emacs Configuration",
    "section": "Packages",
    "text": "Packages\nMake life easy for yourself and use-package\n(unless (package-installed-p 'use-package)\n  (package-refresh-contents)\n  (package-install 'use-package))\n(eval-and-compile\n  (setq use-package-always-ensure t\n        use-package-expand-minimally t))\n\n;; BASIC CUSTOMISATION\n;; --------------------------------------\n(use-package emacs\n         :init\n         (tool-bar-mode -1)\n         (scroll-bar-mode -1)\n         (menu-bar-mode 1)\n         (global-linum-mode t)\n         (global-hl-line-mode 1)\n         (savehist-mode 1)\n         (recentf-mode 1)\n         (global-auto-revert-mode 1)\n         :config\n         ;; Add local lisp for miscellaneous things\n         (add-to-list 'load-path \"~/.config/emacs/lisp/\") ; Local LISP\n         (setq inhibit-startup-message t)    ; hide the startup message\n         (setq global-visual-line-mode t)    ; Visual line wrap\n         (setq inhibit-startup-screen t)     ; Disable startup screen\n         (setq initial-scratch-message \"\")   ; Make *scratch* buffer blank\n         (setq confirm-kill-processes nil)   ; Stop confirming the killing of processes\n         (setq ring-bell-function 'ignore)   ; Disable bell sound\n         (setq global-auto-revert-non-file-buffers t) ; Update non-file buffers (Dired) when disk changes\n         (setq use-dialog-box nil)           ; No dialog pop-ups\n         (setq history-length 100)           ; Mini-buffer history\n         (setq-default fill-column 120)      ; Reset line-length\n         (setq undo-limit 320000)            ; Increase the undo history limits\n             (setq vc-follow-symlinks t)         ; open source of symlink maintain vc (https://stackoverflow.com/a/30900018/1444043)\n         (setq undo-strong-limit 640000)\n             (setq mode-line-compact t)\n         (setq-default indent-tabs-mode nil)\n         (setq-default tab-width 4)\n         (setq-default sh-basic-offset 2)\n         (setq-default sh-indentation 2)\n         (setq-default cursor-type 'bar)     ; Line-style cursor similar to other text editors\n         (setq-default frame-title-format '(\"%f\"))     ; Make window title the buffer name\n         :bind ((\"C-c U\" . revert-buffer)\n            (\"C-c D\" . toggle-debug-on-error)\n            ;; Org\n            (\"\\C-cl\" . org-store-link)\n            (\"\\C-cc\" . org-capture)\n            (\"\\C-ca\" . org-agenda)\n            (\"\\C-cb\" . org-iswitchb)\n            (\"C-x p i\" . org-org-cliplink) ;; From : https://github.com/rexim/org-cliplink\n            ;; Magit /code review\n            (\"C-x g\" . magit-status)\n            (\"C-c P\" . magit-push-current-to-upstream)\n            (\"C-c F\" . magit-pull)\n            (\"C-c R\" . code-review-forge-pr-at-point))\n         :hook\n         ((latex-mode\n           markdown-mode\n           org-mode\n           prog-mode\n           text-mode) . auto-fill-mode)\n         (auto-fill-function . do-auto-fill)\n         (before-save . delete-trailing-whitespace) ;; https://emacs.stackexchange.com/a/40773/10100\n         (prog-mode-hook . highlight-indent-guides-mode)\n         )"
  },
  {
    "objectID": "index.html#keybindings",
    "href": "index.html#keybindings",
    "title": "Emacs Configuration",
    "section": "Keybindings",
    "text": "Keybindings\nMake life easy install and use which-key and helpful.\nhttps://github.com/justbur/emacs-which-key\n(use-package which-key\n         :config (which-key-mode))\n\n;; helpful settings\n;; https://github.com/Wilfred/helpful\n;;\n(use-package helpful\n         :config\n         ;; Note that the built-in `describe-function' includes both functions\n         ;; and macros. `helpful-function' is functions only, so we provide\n         ;; `helpful-callable' as a drop-in replacement.\n         (global-set-key (kbd \"C-h f\") #'helpful-callable)\n         (global-set-key (kbd \"C-h v\") #'helpful-variable)\n         (global-set-key (kbd \"C-h k\") #'helpful-key)\n         ;; Lookup the current symbol at point. C-c C-d is a common keybinding\n         ;; for this in lisp modes.\n         (global-set-key (kbd \"C-c C-d\") #'helpful-at-point)\n\n         ;; Look up *F*unctions (excludes macros).\n         ;;\n         ;; By default, C-h F is bound to `Info-goto-emacs-command-node'. Helpful\n         ;; already links to the manual, if a function is referenced there.\n         (global-set-key (kbd \"C-h F\") #'helpful-function)\n\n         ;; Look up *C*ommands.\n         ;;\n         ;; By default, C-h C is bound to describe `describe-coding-system'. I\n         ;; don't find this very useful, but it's frequently useful to only\n         ;; look at interactive functions.\n         (global-set-key (kbd \"C-h C\") #'helpful-command))"
  },
  {
    "objectID": "index.html#python",
    "href": "index.html#python",
    "title": "Emacs Configuration",
    "section": "Python",
    "text": "Python\nIn addition to useful to configure various aspects of Python. The following config enables…\n\npyvenv - easily switch between Python Virtual Environments.\nblacken - apply Black formatting on saving Python files.\npytest - run pytest framework tests from within Emacs.\nnumpydoc - easily generate Numpydoc strings for functions/methods.\nEIN - Emacs IPython Notebook - Jupyter Notebooks in Emacs.\nFlymake ruff - Flymake extension to run the ruff linter on the fly.\n\n\n;; Hide the modeline for inferior python processes\n(use-package inferior-python-mode\n         :ensure nil\n         :hook (inferior-python-mode . hide-mode-line-mode))\n\n;; Required to easily switch virtual envs\n;; via the menu bar or with `pyvenv-workon`\n;; Setting the `WORKON_HOME` environment variable points\n;; at where the envs are located. I use miniconda.\n(use-package pyvenv\n         :ensure t\n         :config\n         ;; Setting work on to easily switch between environments\n         (setenv \"WORKON_HOME\" (expand-file-name \"~/.virtualenvs/\"))\n         ;; Display virtual envs in the menu bar\n         (setq pyvenv-menu t\n           venv-byhost\n           '((\"kimura\" . \"~/.virtualenvs/\")\n             (\"fisher\" . \"~/.virtualenvs/\")\n             (\"haldane\" . \"~/.virtualenvs/\")\n             (\"ovh\" . \"~/.virtualenvs/\")\n             (\"alarmpi\" . \"~/.virtualenvs/\")\n             (\"alarmpi-4b\" . \"~/.virtualenvs/\"))\n           venv-location (cdr\n                  (assoc system-name venv-byhost))\n           default-venv-byhost\n           '((\"kimura\" . \"~/.virtualenvs/python3_10\")\n             (\"fisher\" . \"~/.virtualenvs/python3_9\")\n             (\"haldane\" . \"~/.virtualenvs/default\")\n             (\"ovh\" . \"~/.virtualenvs/default\")\n             (\"alarmpi\" . \"~/.virtualenvs/default\")\n             (\"alarmpi-4b\" . \"~/.virtualenvs/default\"))\n           default-venv (cdr\n                 (assoc system-name default-venv-byhost))\n           python-environment-directory venv-location)\n         ;; Restart the python process when switching environments\n         (add-hook 'pyvenv-post-activate-hooks (lambda ()\n                             (pyvenv-restart-python)))\n         :hook (python-mode . pyvenv-mode))\n\n;; Built-in Python utilities\n(use-package python\n         :after (pyvenv)\n         :ensure t\n         :config\n         ;; Remove guess indent python message\n         (setq python-indent-guess-indent-offset-verbose nil\n           python-shell-interpreter \"ipython\"\n           python-shell-interpreter-args \"-i --simple-prompt\"\n           ;; python-environment-directory venv-location)\n           python-environment-directory venv-location)\n         ;; Use IPython when available or fall back to regular Python\n         ;; (cond\n         ;;  ((executable-find \"ipython\")\n         ;;   (progn\n         ;;     (setq python-shell-buffer-name \"IPython\")\n         ;;     (setq python-shell-interpreter \"ipython\")\n         ;;     (setq python-shell-interpreter-args \"-i --simple-prompt\")))\n         ;;  ((executable-find \"python3\")\n         ;;   (setq python-shell-interpreter \"python3\"))\n         ;;  ((executable-find \"python2\")\n         ;;   (setq python-shell-interpreter \"python2\"))\n         ;;  (t\n         ;;   (setq python-shell-interpreter \"python\")))\n         :bind (:map python-mode-map\n             (\"C-c p t\" . python-pytest-dispatch)\n             (\"C-c p l\" . pylint)\n             (\"C-c p n\" . numpydoc-generate)\n             (\"C-c p b\" . blacken-buffer)\n             (\"C-c p v\" . pyvenv-workon)))\n\n;;; https://github.com/wbolster/emacs-python-pytest\n(use-package python-pytest\n         :after (pyvenv)\n         :ensure t\n         :defer 2)\n\n;; https://github.com/pythonic-emacs/blacken\n(use-package blacken\n         :ensure t\n         :defer 3\n         :custom\n         (blacken-line-length 120)\n         :hook (python-mode . blacken-mode))\n\n;; https://github.com/erickgnavar/flymake-ruff\n(use-package flymake-ruff\n         :ensure t\n         :defer 3)\n\n;; https://github.com/douglasdavis/numpydoc.el\n(use-package numpydoc\n         :ensure t\n         :defer t\n         :after lsp\n         :custom\n         (numpydoc-prompt-for-input t)\n         (numpydoc-insert-examples-block nil)\n         :bind (:map python-mode-map\n             (\"C-c p n\" . numpydoc-generate)))\n\n;; https://github.com/millejoh/emacs-ipython-notebook\n(use-package ein\n         :ensure t\n         :defer t)"
  },
  {
    "objectID": "index.html#language-server-protocol",
    "href": "index.html#language-server-protocol",
    "title": "Emacs Configuration",
    "section": "Language Server Protocol",
    "text": "Language Server Protocol\nTwo options that leverage Language Server Protocol\n\nLSP Mode\nEglot\n\nEmacs >= 29.0 includes Eglot.\n\n\nns-rse.github.io/emacs-config/"
  }
]