[
  {
    "objectID": "index.html#packages",
    "href": "index.html#packages",
    "title": "Emacs Configuration",
    "section": "Packages",
    "text": "Packages\nConfigure and use various (M)ELPA repositories…\n(package-initialize)\n(require 'package)\n\n;; Adding repositories along with priority https://emacs.stackexchange.com/a/2989/10100\n(setq package-archives\n      '((\"GNU ELPA\" . \"https://elpa.gnu.org/packages/\")\n        (\"NonGNU ELPA\"  . \"https://elpa.nongnu.org/nongnu/\")\n        (\"MELPA Stable\" . \"https://stable.melpa.org/packages/\")\n        (\"MELPA\"    . \"https://melpa.org/packages/\"))\n      package-archive-priorities\n      '((\"MELPA\" . 10)\n        (\"GNU ELPA\" . 5)\n        (\"NonGNU ELPA\"  . 5)\n        (\"MELPA Stable\" . 0)))\n;; On some systems we have problems communicating with ELPA (https://emacs.stackexchange.com/a/62210)\n(setq gnutls-algorithm-priority \"NORMAL:-VERS-TLS1.3\")\n\n(when (not package-archive-contents)\n  (package-refresh-contents))"
  },
  {
    "objectID": "index.html#packages-1",
    "href": "index.html#packages-1",
    "title": "Emacs Configuration",
    "section": "Packages",
    "text": "Packages\nMake life easy for yourself and use-package\n(unless (package-installed-p 'use-package)\n  (package-refresh-contents)\n  (package-install 'use-package))\n(eval-and-compile\n  (setq use-package-always-ensure t\n        use-package-expand-minimally t))\n\n;; BASIC CUSTOMISATION\n;; --------------------------------------\n(use-package emacs\n         :init\n         (tool-bar-mode -1)\n         (scroll-bar-mode -1)\n         (menu-bar-mode 1)\n         (global-linum-mode t)\n         (global-hl-line-mode 1)\n         (savehist-mode 1)\n         (recentf-mode 1)\n         (global-auto-revert-mode 1)\n         :config\n         ;; Add local lisp for miscellaneous things\n         (add-to-list 'load-path \"~/.config/emacs/lisp/\") ; Local LISP\n         (setq inhibit-startup-message t)    ; hide the startup message\n         (setq global-visual-line-mode t)    ; Visual line wrap\n         (setq inhibit-startup-screen t)     ; Disable startup screen\n         (setq initial-scratch-message \"\")   ; Make *scratch* buffer blank\n         (setq confirm-kill-processes nil)   ; Stop confirming the killing of processes\n         (setq ring-bell-function 'ignore)   ; Disable bell sound\n         (setq global-auto-revert-non-file-buffers t) ; Update non-file buffers (Dired) when disk changes\n         (setq use-dialog-box nil)           ; No dialog pop-ups\n         (setq history-length 100)           ; Mini-buffer history\n         (setq-default fill-column 120)      ; Reset line-length\n         (setq undo-limit 320000)            ; Increase the undo history limits\n             (setq vc-follow-symlinks t)         ; open source of symlink maintain vc (https://stackoverflow.com/a/30900018/1444043)\n         (setq undo-strong-limit 640000)\n             (setq mode-line-compact t)\n         (setq-default indent-tabs-mode nil)\n         (setq-default tab-width 4)\n         (setq-default sh-basic-offset 2)\n         (setq-default sh-indentation 2)\n         (setq-default cursor-type 'bar)     ; Line-style cursor similar to other text editors\n         (setq-default frame-title-format '(\"%f\"))     ; Make window title the buffer name\n         :bind ((\"C-c U\" . revert-buffer)\n            (\"C-c D\" . toggle-debug-on-error)\n            ;; Org\n            (\"\\C-cl\" . org-store-link)\n            (\"\\C-cc\" . org-capture)\n            (\"\\C-ca\" . org-agenda)\n            (\"\\C-cb\" . org-iswitchb)\n            (\"C-x p i\" . org-org-cliplink) ;; From : https://github.com/rexim/org-cliplink\n            ;; Magit /code review\n            (\"C-x g\" . magit-status)\n            (\"C-c P\" . magit-push-current-to-upstream)\n            (\"C-c F\" . magit-pull)\n            (\"C-c R\" . code-review-forge-pr-at-point))\n         :hook\n         ((latex-mode\n           markdown-mode\n           org-mode\n           prog-mode\n           text-mode) . auto-fill-mode)\n         (auto-fill-function . do-auto-fill)\n         (before-save . delete-trailing-whitespace) ;; https://emacs.stackexchange.com/a/40773/10100\n         (prog-mode-hook . highlight-indent-guides-mode)\n         )"
  },
  {
    "objectID": "index.html#keybindings",
    "href": "index.html#keybindings",
    "title": "Emacs Configuration",
    "section": "Keybindings",
    "text": "Keybindings\nMake life easy install and use which-key and helpful.\nhttps://github.com/justbur/emacs-which-key\n(use-package which-key\n         :config (which-key-mode))\n\n;; helpful settings\n;; https://github.com/Wilfred/helpful\n;;\n(use-package helpful\n         :config\n         ;; Note that the built-in `describe-function' includes both functions\n         ;; and macros. `helpful-function' is functions only, so we provide\n         ;; `helpful-callable' as a drop-in replacement.\n         (global-set-key (kbd \"C-h f\") #'helpful-callable)\n         (global-set-key (kbd \"C-h v\") #'helpful-variable)\n         (global-set-key (kbd \"C-h k\") #'helpful-key)\n         ;; Lookup the current symbol at point. C-c C-d is a common keybinding\n         ;; for this in lisp modes.\n         (global-set-key (kbd \"C-c C-d\") #'helpful-at-point)\n\n         ;; Look up *F*unctions (excludes macros).\n         ;;\n         ;; By default, C-h F is bound to `Info-goto-emacs-command-node'. Helpful\n         ;; already links to the manual, if a function is referenced there.\n         (global-set-key (kbd \"C-h F\") #'helpful-function)\n\n         ;; Look up *C*ommands.\n         ;;\n         ;; By default, C-h C is bound to describe `describe-coding-system'. I\n         ;; don't find this very useful, but it's frequently useful to only\n         ;; look at interactive functions.\n         (global-set-key (kbd \"C-h C\") #'helpful-command))"
  },
  {
    "objectID": "index.html#python",
    "href": "index.html#python",
    "title": "Emacs Configuration",
    "section": "Python",
    "text": "Python\nIn addition to useful to configure various aspects of Python. The following config enables…\n\npyvenv - easily switch between Python Virtual Environments.\nblacken - apply Black formatting on saving Python files.\npytest - run pytest framework tests from within Emacs.\nnumpydoc - easily generate Numpydoc strings for functions/methods.\nEIN - Emacs IPython Notebook - Jupyter Notebooks in Emacs.\nFlymake ruff - Flymake extension to run the ruff linter on the fly.\n\n\n;; Hide the modeline for inferior python processes\n(use-package inferior-python-mode\n         :ensure nil\n         :hook (inferior-python-mode . hide-mode-line-mode))\n\n;; Required to easily switch virtual envs\n;; via the menu bar or with `pyvenv-workon`\n;; Setting the `WORKON_HOME` environment variable points\n;; at where the envs are located. I use miniconda.\n(use-package pyvenv\n         :ensure t\n         :config\n         ;; Setting work on to easily switch between environments\n         (setenv \"WORKON_HOME\" (expand-file-name \"~/.virtualenvs/\"))\n         ;; Display virtual envs in the menu bar\n         (setq pyvenv-menu t\n           venv-byhost\n           '((\"kimura\" . \"~/.virtualenvs/\")\n             (\"fisher\" . \"~/.virtualenvs/\")\n             (\"haldane\" . \"~/.virtualenvs/\")\n             (\"ovh\" . \"~/.virtualenvs/\")\n             (\"alarmpi\" . \"~/.virtualenvs/\")\n             (\"alarmpi-4b\" . \"~/.virtualenvs/\"))\n           venv-location (cdr\n                  (assoc system-name venv-byhost))\n           default-venv-byhost\n           '((\"kimura\" . \"~/.virtualenvs/python3_10\")\n             (\"fisher\" . \"~/.virtualenvs/python3_9\")\n             (\"haldane\" . \"~/.virtualenvs/default\")\n             (\"ovh\" . \"~/.virtualenvs/default\")\n             (\"alarmpi\" . \"~/.virtualenvs/default\")\n             (\"alarmpi-4b\" . \"~/.virtualenvs/default\"))\n           default-venv (cdr\n                 (assoc system-name default-venv-byhost))\n           python-environment-directory venv-location)\n         ;; Restart the python process when switching environments\n         (add-hook 'pyvenv-post-activate-hooks (lambda ()\n                             (pyvenv-restart-python)))\n         :hook (python-mode . pyvenv-mode))\n\n;; Built-in Python utilities\n(use-package python\n         :after (pyvenv)\n         :ensure t\n         :config\n         ;; Remove guess indent python message\n         (setq python-indent-guess-indent-offset-verbose nil\n           python-shell-interpreter \"ipython\"\n           python-shell-interpreter-args \"-i --simple-prompt\"\n           ;; python-environment-directory venv-location)\n           python-environment-directory venv-location)\n         ;; Use IPython when available or fall back to regular Python\n         ;; (cond\n         ;;  ((executable-find \"ipython\")\n         ;;   (progn\n         ;;     (setq python-shell-buffer-name \"IPython\")\n         ;;     (setq python-shell-interpreter \"ipython\")\n         ;;     (setq python-shell-interpreter-args \"-i --simple-prompt\")))\n         ;;  ((executable-find \"python3\")\n         ;;   (setq python-shell-interpreter \"python3\"))\n         ;;  ((executable-find \"python2\")\n         ;;   (setq python-shell-interpreter \"python2\"))\n         ;;  (t\n         ;;   (setq python-shell-interpreter \"python\")))\n         :bind (:map python-mode-map\n             (\"C-c p t\" . python-pytest-dispatch)\n             (\"C-c p l\" . pylint)\n             (\"C-c p n\" . numpydoc-generate)\n             (\"C-c p b\" . blacken-buffer)\n             (\"C-c p v\" . pyvenv-workon)))\n\n;;; https://github.com/wbolster/emacs-python-pytest\n(use-package python-pytest\n         :after (pyvenv)\n         :ensure t\n         :defer 2)\n\n;; https://github.com/pythonic-emacs/blacken\n(use-package blacken\n         :ensure t\n         :defer 3\n         :custom\n         (blacken-line-length 120)\n         :hook (python-mode . blacken-mode))\n\n;; https://github.com/erickgnavar/flymake-ruff\n(use-package flymake-ruff\n         :ensure t\n         :defer 3)\n\n;; https://github.com/douglasdavis/numpydoc.el\n(use-package numpydoc\n         :ensure t\n         :defer t\n         :after lsp\n         :custom\n         (numpydoc-prompt-for-input t)\n         (numpydoc-insert-examples-block nil)\n         :bind (:map python-mode-map\n             (\"C-c p n\" . numpydoc-generate)))\n\n;; https://github.com/millejoh/emacs-ipython-notebook\n(use-package ein\n         :ensure t\n         :defer t)"
  },
  {
    "objectID": "index.html#language-server-protocol",
    "href": "index.html#language-server-protocol",
    "title": "Emacs Configuration",
    "section": "Language Server Protocol",
    "text": "Language Server Protocol\nTwo options that leverage Language Server Protocol\n\nLSP Mode\nEglot\n\nEmacs >= 29.0 includes Eglot."
  },
  {
    "objectID": "index.html#lsp-mode",
    "href": "index.html#lsp-mode",
    "title": "Emacs Configuration",
    "section": "LSP Mode",
    "text": "LSP Mode\nNot perfect, haven’t configured R, org-mode support is a work in progress.\n;;; LSP CONFIGURATION\n;;; --------------------------------------\n;;; https://gitlab.com/nathanfurnal/dotemacs/-/snippets/2060535\n;;; https://ianyepan.github.io/posts/emacs-ide/\n;; Provides workspaces with file browsing (tree file viewer)\n;; and project management when coupled with `projectile`.\n(use-package treemacs\n         :ensure t\n         :defer t\n         :config\n         (setq treemacs-no-png-images t\n           treemacs-width 24)\n         :bind (\"C-c t\" . treemacs))\n\n\n;; Provide LSP-mode for python, it requires a language server.\n;; I use `lsp-pyright`. Know that you have to `M-x lsp-restart-workspace`\n;; if you change the virtual environment in an open python buffer.\n(use-package lsp-mode\n         :ensure t\n         :defer t\n         :config\n         (setq lsp-idle-delay 0.5\n           lsp-enable-symbol-highlighting t\n           lsp-pylsp-plugins-pylint-args [\"--rcfile=/home/neil/dotfiles/python/.pylintrc\"])\n         ;; (setq lsp-markdown-server-command remark-language-server)\n         ;; (lsp-register-custom-settings\n         ;;  ;; pyls enabled/disabled https://github.com/python-lsp/python-lsp-server/blob/develop/CONFIGURATION.md\n         ;;  '(;; Enabled\n         ;;    (\"pylsp.plugins.jedi_completion.enabled\" t t)\n         ;;    (\"pylsp.plugins.jedi_completion.cache_for\" '(pandas, numpy, matplotlib))\n         ;;    (\"pylsp.plugins.jedi_hover.enabled\" t t)\n         ;;    (\"pylsp.plugins.jedi_references.enabled\" t t)\n         ;;    (\"pylsp.plugins.pyls_black.enabled\" t t)\n         ;;    (\"pylsp.plugins.pycodestyle.maxLineLength\" nil 120)\n         ;;    ;; (\"pylsp.plugins.pydocstyle.enabled\" t t)\n         ;;    ;; (\"pylsp.plugins.pydocstyle.convention\" nil 'numpy)\n         ;;    (\"pylsp.plugins.pylint.enabled\" t t)\n         ;;    ;; Disabled (duplicated by flake8)\n         ;;    (\"pylsp.plugins.pycodestyle.enabled\" nil t)\n         ;;    (\"pylsp.plugins.mccabe.enabled\" nil t)\n         ;;    (\"pylsp.plugins.pyflakes.enabled\" nil t)))\n         :commands (lsp lsp-deferred)\n         :init (setq lsp-keymap-prefix \"C-c l\"\n             lsp-bash-highlight-parsing-errors t)\n         :hook ((python-mode . lsp)\n            (bash-mode . lsp)\n            (dockerfile-mode . lsp)\n            (groovy-mode . lsp)\n            (html-mode . lsp)\n            (latex-mode . lsp)\n            (markdown-mode . lsp)\n            (gfm-mode . lsp)\n            (org-mode . lsp)\n            (R-mode . lsp)\n            (ess-r-mode . lsp)\n            (sh-mode . lsp)\n            (terraform-mode . lsp)))\n\n;; Provides completion, with the proper backend\n;; it will provide Python completion.\n(use-package company\n         :ensure t\n         :defer t\n         :diminish\n         :config\n         (setq company-dabbrev-other-buffers t\n           company-dabbrev-code-other-buffers t)\n         :hook ((text-mode . company-mode)\n            (prog-mode . company-mode)))\n\n;; Provides visual help in the buffer\n;; For example definitions on hover.\n;; The `imenu` lets me browse definitions quickly.\n;; https://github.com/emacs-lsp/lsp-ui\n(use-package lsp-ui\n         :ensure t\n         :defer t\n         :config\n         (setq lsp-ui-doc-enable t\n           lsp-ui-doc-delay 1\n           lsp-ui-doc-header nil\n           sp-ui-doc-include-signature t\n           lsp-ui-doc-border (face-foreground 'default)\n           lsp-ui-doc-use-childframe t\n           lsp-ui-doc-position 'top\n           lsp-ui-doc-include-signature t\n           lsp-ui-doc-use-childframe t\n           lsp-ui-sideline-enable nil\n           lsp-ui-flycheck-enable t\n           lsp-ui-flycheck-list-position 'right\n           lsp-ui-flycheck-live-reporting t\n           lsp-ui-peek-enable t\n           lsp-ui-peek-list-width 60\n           lsp-ui-peek-peek-height 25\n           lsp-ui-sideline-enable t\n           lsp-ui-sideline-show-code-actions t\n           lsp-ui-sideline-show-hover t\n           lsp-ui-sideline-delay 3)\n         :hook (lsp-mode . lsp-ui-mode)\n         :bind (:map lsp-ui-mode-map\n             (\"C-c i\" . lsp-ui-imenu)))\n\n;; LSP Treemacs\n(use-package lsp-treemacs\n         :ensure t\n         :defer t\n         :config\n         (setq lsp-treemacs-sync-mode 1))\n\n;; Integration with the debug server\n(use-package dap-mode\n         :ensure t\n         :defer t\n         :after lsp-mode\n         :config\n         (dap-auto-configure-mode))\n\n\n;; Required to hide the modeline\n(use-package hide-mode-line\n         :ensure t\n         :defer t)\n\n\n;; Language servers\n;; Read the docs for the different variables set in the config.\n;; Python - pyright\n;; (use-package lsp-pyright\n;;   :ensure t\n;;   :defer t\n;;   :config\n;;   (setq lsp-clients-python-library-directories '(\"/usr/\" \"~/miniconda3/pkgs\"))\n;;   (setq lsp-pyright-disable-language-service nil\n;;  lsp-pyright-disable-organize-imports nil\n;;  lsp-pyright-auto-import-completions t\n;;  lsp-pyright-use-library-code-for-types t\n;;  ;; lsp-pyright-typeshed-paths\n;;  ;; lsp-pyright-diagnostic-mode\n;;  lsp-pyright-typechecking-mode \"basic\"\n;;  lsp-pyright-log-level 1\n;;  ;; lsp-pyright-auto-search-paths\n;;  ;; lsp-pyright-extra-paths\n;;  lsp-pyright-venv-path \"~/miniconda3/envs\")\n;;   :hook ((python-mode . (lambda ()\n;;                           (require 'lsp-pyright) (lsp-deferred)))))\n\n;; Python - Jedi\n;; LSP Module : https://github.com/fredcamps/lsp-jedi\n;; Server     : https://github.com/pappasam/jedi-language-server\n(use-package lsp-jedi\n         :ensure t\n         :config\n         (with-eval-after-load \"lsp-mode\"\n           (add-to-list 'lsp-disabled-clients 'pyls)\n           (add-to-list 'lsp-enabled-clients 'jedi)))\n;; :init\n;; (setq lsp-jedi-workspace-extra-paths\n;;       (vconcat lsp-jedi-workspace-extra-paths [\"/home/neil/.virtualenvs/python3_10/lib/site-packages\"])))\n\n;; Python pyls\n;; https://www.mattduck.com/lsp-python-getting-started.html\n\n;; Python - Sourcery\n;; https://github.com/sourcery-ai/sourcery/wiki/Emacs\n;; (lsp-register-client\n;;  (make-lsp-client :new-connection (lsp-stdio-connection '(\"sourcery\" \"lsp\"))\n;;                   :initialization-options '((token . \"user_ajagq3NtzYEZHCChHXS1bXvaFFZpOb3f8AC666z0J_cCknj8OLZsDR31tK0\")\n;;                                             (extension_version . \"emacs-lsp\")\n;;                                             (editor_version . \"emacs\"))\n;;                   :activation-fn (lsp-activate-on \"python\")\n;;                   :server-id 'sourcery\n;;                   :add-on? t\n;;                   :priority 2))\n;; LTex\n;; LSP Module : https://github.com/emacs-languagetool/lsp-ltex\n;; Server     : https://valentjn.github.io/ltex/\n(use-package lsp-ltex\n         :ensure t\n         :hook (text-mode . (lambda ()\n                  (require 'lsp-ltex)\n                  (lsp))))  ; or lsp-deferred\n(use-package lsp-latex\n         :ensure t\n         :hook (text-mode . (lambda ()\n                  (require 'lsp-latex)\n                  (lsp))))\n;; Julia\n;; LSP Module : https://github.com/non-Jedi/lsp-julia\n;; Server     :\n(use-package lsp-julia\n         :ensure t\n         :config\n         (setq lsp-julia-default-environment \"~/.julia/environments/v1.5\"))\n\n;; Markdown\n;; LSP Module : https://emacs-lsp.github.io/lsp-mode/page/lsp-markdown/\n;; Server     : https://github.com/remarkjs/remark-language-server\n\n;; Bash\n;; https://github.com/bash-lsp/bash-language-server\n\n;; R\n;; https://emacs-lsp.github.io/lsp-mode/page/lsp-r/\n;; (use-package lsp-r\n;;   :ensure t)\n\n;; Cleanup LSP sessions https://arjenwiersma.nl/posts/2022-11-07-cleaning-up-after-lsp/index.html\n(defun nds/cleanup-lsp ()\n  \"Remove all the workspace folders from LSP\"\n  (interactive)\n  (let ((folders (lsp-session-folders (lsp-session))))\n    (while folders\n      (lsp-workspace-folders-remove (car folders))\n      (setq folders (cdr folders)))))"
  },
  {
    "objectID": "index.html#eglot",
    "href": "index.html#eglot",
    "title": "Emacs Configuration",
    "section": "Eglot",
    "text": "Eglot\nExperimental, basic stuff works, not yet on a par with LSP Mode.\n;;; Eglot settings\n;;;\n;;; https://joaotavora.github.io/eglot/ / https://github.com/joaotavora/eglot\n;;;\n;;; Language Servers\n;;; ----------------\n;;;\n;;; Bash https://github.com/bash-lsp/bash-language-server\n;;; Dockerfile https://github.com/rcjsuen/dockerfile-language-server-nodejs\n;;; JSON https://github.com/hrsh7th/vscode-langservers-extracted\n;;; Markdown https://github.com/artempyanykh/marksman\n;;; Python https://github.com/pappasam/jedi-language-server\n;;; R https://cran.r-project.org/package=languageserver\n;;; Rust https://github.com/rust-analyzer/rust-analyzer\n;;; Tex/LaTeX https://github.com/astoff/digestif\n;;; YAML https://github.com/redhat-developer/yaml-language-server\n;;;\n;;; Org-mode isn't yet supported but see https://github.com/joaotavora/eglot/issues/523\n\n\n(use-package eglot\n         :ensure t\n         :defer t\n         :config\n         (define-key global-map (kbd \"C-c E\") (make-sparse-keymap))\n         (add-to-list 'eglot-server-programs '(python-mode . (\"jedi-language-server\")))\n         :init\n         (setq lsp-keymap-prefix \"C-c l\"\n           lsp-bash-highlight-parsing-errors t\n           lsp-pylsp-plugins-pylint-args [\"--rcfile=/home/neil/dotfiles/python/.pylintrc\"])\n         :hook\n         ((bash-mode . eglot-ensure)\n          (ess-r-mode . eglot-ensure)\n          (html-mode . eglot-ensure)\n          (latex-mode . eglot-ensure)\n          (markdown-mode . eglot-ensure)\n          (python-mode . eglot-ensure)\n          (R-mode . eglot-ensure)\n          (rust-mode . eglot-ensure)\n          (sh-mode . eglot-ensure))\n             :bind\n             ((\"C-c e l\" . eglot)\n              (\"C-c e c\" . eglot-reconnect)\n          (\"C-c e s\" . eglot-shutdown)\n              (\"C-c e d\" . flymake-show-buffer-diagnostics)\n              (\"C-c e f f\" . eglot-format)\n              (\"C-c e f b\" . eglot-format-buffer)\n              (\"C-c e r r\" . eglot-rename))\n             )"
  },
  {
    "objectID": "index.html#centaur-tabs",
    "href": "index.html#centaur-tabs",
    "title": "Emacs Configuration",
    "section": "Centaur Tabs",
    "text": "Centaur Tabs\n;; CENTAUR TABS CONFIGURATION\n;; --------------------------------------\n;; https://github.com/ema2159/centaur-tabs\n(use-package centaur-tabs\n         :demand\n         :config\n         (centaur-tabs-mode t)\n         :init\n         (setq centaur-tabs-enable-key-bindings t\n               centaur-tabs-style \"wave\"\n               centaur-tabs-set-icons t\n               centaur-tabs-set-bar 'under\n               x-underline-at-descent-line t\n               centaur-tabs-cycle-scope 'default\n           centaur-tabs-set-modified-marker t\n           centaur-tabs-modified-marker \"⏺\")\n         :bind\n         (\"C-<prior>\" . centaur-tabs-backward)\n         (\"C-<next>\" . centaur-tabs-forward)\n             )\n\n\n(defun centaur-tabs-buffer-groups ()\n  \"`centaur-tabs-buffer-groups' control buffers' group rules.\n;;     Group centaur-tabs with mode if buffer is derived from `eshell-mode' `emacs-lisp-mode' `dired-mode' `org-mode' `magit-mode'.\n;;     All buffer name start with * will group to \\\"Emacs\\\".\n;;     Other buffer group by `centaur-tabs-get-group-name' with project name.\"\n  (list\n   (cond\n    ;;; Attempts to group mastodon buffers, not working 2023-01-02\n    ;; ((string-equal \"*mastodon\" (substring (buffer-name) 0 8))\n    ;;  \"Mastodon\")\n    ((or (string-equal \"*\" (substring (buffer-name) 0 1))\n     (memq major-mode '(magit-process-mode\n                magit-status-mode\n                magit-diff-mode\n                magit-log-mode\n                magit-file-mode\n                magit-blob-mode\n                magit-blame-mode)))\n     \"Emacs\")\n    ;; ((derived-mode-p 'prog-mode) \"Editing\")\n    ;; ((memq major-mode '(python-mode)) \"Python\")\n    ;;; Following attempts to split magit buffers out to their own group, not working 2023-01-02\n    ;; ((string-equal \"*\" (substring (buffer-name) 0 1))\n    ;;  \"Emacs\")\n    ;; ((string-equal \"magit\" (substring (buffer-name) 0 4)) \"Magit\")\n    ;; ((memq major-mode '(magit-process-mode\n    ;;                  magit-status-mode\n    ;;                  magit-diff-mode\n    ;;                  magit-log-mode\n    ;;                  magit-file-mode\n    ;;                  magit-blob-mode\n    ;;                  magit-blame-mode))\n    ;;  \"Magit\")\n    ;; ((derived-mode-p 'dired-mode) \"Dired\")\n    ((memq major-mode '(helpful-mode\n                        help-mode))\n     \"Help\")\n    ((memq major-mode '(org-mode\n            org-agenda-clockreport-mode\n            org-src-mode\n            org-agenda-mode\n            org-beamer-mode\n            org-indent-mode\n            org-bullets-mode\n            org-cdlatex-mode\n            org-agenda-log-mode\n            diary-mode))\n     \"OrgMode\")\n    (t\n     (centaur-tabs-get-group-name (current-buffer))))))\n\n(defun centaur-tabs-hide-tab (x)\n  \"Do no to show buffer X in tabs.\"\n  (let ((name (format \"%s\" x)))\n    (or\n     ;; Current window is not dedicated window.\n     (window-dedicated-p (selected-window))\n     ;; Buffer name not match below blacklist.\n     (string-prefix-p \"*epc\" name)\n     (string-prefix-p \"*helm\" name)\n     (string-prefix-p \"*Helm\" name)\n     (string-prefix-p \"*Compile-Log*\" name)\n     (string-prefix-p \"*lsp\" name)\n     (string-prefix-p \"*company\" name)\n     (string-prefix-p \"*Flycheck\" name)\n     (string-prefix-p \"*tramp\" name)\n     (string-prefix-p \" *Mini\" name)\n     (string-prefix-p \"*help\" name)\n     (string-prefix-p \"*straight\" name)\n     (string-prefix-p \"*temp\" name)\n     (string-prefix-p \"*Help\" name)\n     (string-prefix-p \"*mybuf\" name)\n     ;; Is not magit buffer.\n     (and (string-prefix-p \"magit\" name)\n      (not (file-name-extension name)))\n     )))"
  },
  {
    "objectID": "index.html#emacs-speaks-statistics",
    "href": "index.html#emacs-speaks-statistics",
    "title": "Emacs Configuration",
    "section": "Emacs Speaks Statistics",
    "text": "Emacs Speaks Statistics\nBeen around for a long time (>20 years). Includes quarto-mode.\n;; ESS CONFIGURATION\n;; --------------------------------------\n;;\n;; Useful pages to read on configuration of ESS and sometimes LSP mode\n;;\n;; ESS\n;; https://weikaichen.gitee.io/notes/emacs-ess-r/\n;;\n;; + lsp-mode\n;; https://github.com/emacs-ess/ESS/issues/809\n;; https://github.com/emacs-lsp/lsp-mode/issues/1383#issue-560006302\n;;\n;; Pipes and assignment customisation\n;;\n;; https://emacs.stackexchange.com/a/8055\n;; Notes on underscore for assignment\n;;\n;; https://emacs.stackexchange.com/questions/48134/ess-smart-underscore-does-not-work-in-emacs25)\n;; https://github.com/emacs-ess/ESS/issues/809\n;; https://chainsawriot.com/postmannheim/2022/12/24/aoe24.html\n;; https://emacs.stackexchange.com/a/65148\n;; https://github.com/emacs-ess/ESS/issues/809#issuecomment-453538386\n;;\n;; Plots in Emacs buffers\n;; https://emacs.stackexchange.com/questions/2292/ess-plot-directly-to-an-emacs-buffer\n;;\n;; Better still plots in the browser\n;;\n;; https://www.youtube.com/watch?v=uxyhmhRVOfw\n(use-package ess\n         :ensure t\n         ;; :defer 1\n             ;;     :requires ess-r-mode\n             ;;     ess-r-package\n         :init\n         :mode ((\"/R/.*\\\\.q\\\\'\"       . R-mode)\n            (\"\\\\.[rR]\\\\'\"         . R-mode)\n            (\"\\\\.[rR]profile\\\\'\"  . R-mode)\n            (\"NAMESPACE\\\\'\"       . R-mode)\n            (\"CITATION\\\\'\"        . R-mode)\n            (\"\\\\.[Rr]out\"         . R-transcript-mode)\n            (\"\\\\.Rmd\\\\'\"          . Rd-mode)\n            (\"\\\\.Rd\\\\'\"           . Rd-mode))\n         :interpreter ((\"R\" . R-mode)\n               (\"R\" . R-transcript-mode)\n               (\"R\" . Rd-mode))\n         :config\n             (require 'ess-r-mode)\n             (require 'ess-r-package)\n         (setq ess-r-backend 'lsp)\n         (setq comint-input-ring-size 1000)\n         (setq ess-indent-offset 2)\n         (setq ess-eval-visibly-p nil)\n             (setq ess-startup-directory nil)\n         (setq ess-ask-for-ess-directory nil)\n         (setq ess-togggle-underscore nil)\n         (setq ess-eval-visibly 'nowait)\n             (setq ess-use-tracebug nil)\n         :hook\n         (ess-mode . company-mode)\n         (inferior-ess-mode . company-mode)\n             :bind\n             (:map ess-r-mode-map\n           (\"_\" . 'ess-insert-assign)  ;;\n           (\"C-q\" . 'ess-eval-region-or-line-and-step)\n           (\"C-|\" . \" |>\\n\"))\n             (:map inferior-ess-r-mode-map\n           (\"_\" . 'ess-insert-assign)\n           (\"C-|\" . \" |>\\n\")))\n\n;; Quarto mode https://github.com/quarto-dev/quarto-emacs\n;; By default associated with .qmd files\n(use-package quarto-mode\n         :mode ((\"\\\\.Rmd\" . poly-quarto-mode))\n         :bind ((\"C-c q\" . quarto-preview)))\n\n\n;;; Set the width of the buffer automatically from\n;;; https://stat.ethz.ch/pipermail/ess-help/2009-July/005455.html\n(defun my-ess-post-run-hook ()\n  (ess-execute-screen-options)\n  (local-set-key \"\\C-cw\" 'ess-execute-screen-options))\n(add-hook 'ess-post-run-hook 'my-ess-post-run-hook)\n;;; Auto-complete and ESS http://goo.gl/utAi2Z\n(use-package auto-complete)\n;; (use-package auto-complete-config)\n;; (ac-config-default)\n(auto-complete-mode)"
  },
  {
    "objectID": "index.html#themes",
    "href": "index.html#themes",
    "title": "Emacs Configuration",
    "section": "Themes",
    "text": "Themes\n(use-package modus-themes\n         :ensure t                         ; omit this to use the built-in themes\n         :init\n         ;; Add all your customizations prior to loading the themes\n         (setq modus-themes-italic-constructs t\n           modus-themes-bold-constructs t\n           modus-themes-org-blocks '(tinted-background))\n         :config\n             :bind\n             (\"<f12>\" . modus-themes-toggle))\n\n(modus-themes-select 'modus-vivendi) ;; OR modus-operandi"
  }
]